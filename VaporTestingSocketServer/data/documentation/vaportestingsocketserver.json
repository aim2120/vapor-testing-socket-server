{"kind":"symbol","hierarchy":{"paths":[[]]},"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"https:\/\/github.com\/vapor\/vapor","isActive":true},{"text":" library already ships with a very useful ","type":"text"},{"code":"VaporTesting","type":"codeVoice"},{"type":"text","text":" library that supports “in-memory” and “live” TCP server testing."},{"text":" ","type":"text"},{"text":"However, this SDK does not support server testing over UDS.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This package was created to fill this need."}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"This library is only available for use in Debug builds.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This is due to the need to use a "},{"code":"@testable","type":"codeVoice"},{"text":" import for the ","type":"text"},{"type":"codeVoice","code":"VaporTesting"},{"text":" library target.","type":"text"},{"text":" ","type":"text"},{"text":"Feel free to open an issue if this is problematic for your own usage.","type":"text"}]}]},{"text":"Why use UDS for Vapor server testing?","anchor":"Why-use-UDS-for-Vapor-server-testing","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"When testing a Vapor server, there’s often a need to stub requests made to endpoints made to external services."},{"type":"text","text":" "},{"text":"One easy way to achieve this is to create a ","type":"text"},{"type":"codeVoice","code":"RouteCollection"},{"type":"text","text":" for that external service for testing purposes and add it to the application being unit tested."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This means of stubbing an external service is not possible when using the “in-memory” testing application (which is the default behavior for "},{"code":"VaporTesting","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"text":"Attempting to do so will result in “connection refused” when attempting to make requests to these external service via an ","type":"text"},{"type":"codeVoice","code":"HTTPClient"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It is possible to stub this way when using a TCP connection (e.g. a "},{"type":"codeVoice","code":"localhost"},{"text":" server).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, there is a more efficient way to achieve this type of stubbing with UNIX domain sockets."},{"type":"text","text":" "},{"type":"text","text":"UDS allow for inter-process communication to occur on the same operating system."},{"type":"text","text":" "},{"text":"Communicating over UDS is more efficient than communicating over TCP.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"How do I use this SDK?","anchor":"How-do-I-use-this-SDK"},{"inlineContent":[{"text":"This SDK was designed to work alongside the ","type":"text"},{"code":"VaporTesting","type":"codeVoice"},{"type":"text","text":" library."}],"type":"paragraph"},{"inlineContent":[{"text":"Let’s say we have server that sends alerts to some endpoint whenever it receives a message.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For simplicity, I will only show the "},{"type":"codeVoice","code":"RouteCollection"},{"type":"text","text":" for the application."},{"text":" ","type":"text"},{"type":"text","text":"Otherwise, assume it’s a normative Vapor application."}],"type":"paragraph"},{"code":["import Vapor","","struct MessageRouteController: RouteCollection {","    let alertBaseURL: URL","","    func boot(routes: any RoutesBuilder) throws {","        routes.post(\"message\", use: { req async throws in","            let message = req.body.string ?? \"\"","            do {","                let alertEndpoint = alertBaseURL.appending(path: \"alert\").absoluteString","                let res = try await req.client.post(URI(string: alertEndpoint), content: message)","                return res.status","            } catch {","                return HTTPResponseStatus.internalServerError","            }","        })","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In our tests, we will define a stub "},{"code":"RouteCollection","type":"codeVoice"},{"type":"text","text":" for the external alerting service."},{"text":" ","type":"text"},{"type":"text","text":"The stub service will return either "},{"type":"codeVoice","code":"200"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"400"},{"type":"text","text":", depending on the content of the message."}],"type":"paragraph"},{"code":["import Vapor","","struct StubAlertRouteController: RouteCollection {","    func boot(routes: any RoutesBuilder) throws {","        routes.post(\"alert\", use: { req async throws in","            let message = req.body.string ?? \"\"","            switch message {","            case \"stub_ok\": return HTTPResponseStatus.ok","            default: return HTTPResponseStatus.badRequest","            }","        })","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"We’ll then perform the following steps in our test functions:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a testing application using "},{"type":"codeVoice","code":"VaporTesting.withApp"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"code":"TemporarySocket","type":"codeVoice"},{"text":" using ","type":"text"},{"type":"codeVoice","code":"withTemporarySocket"},{"type":"text","text":" to use during testing (this is the UDS we’ll be communicating over)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Setup the routes, making use to use the socket URL for the stubbed service route."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Finally, test the application using the "},{"code":"testing","type":"codeVoice"},{"text":" API to specify UDS.","type":"text"}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["import Testing","import Vapor","import VaporTesting","import VaporTestingSocketServer","","@Test","func messageReturnsOkOnSuccessfulAlert() async throws {","    \/\/ (1)","    try await VaporTesting.withApp { app in","        \/\/ (2)","        try await withTemporarySocket { tempSocket in ","            \/\/ (3)","            try app.register(collection: MessageRouteController(alertBaseURL: tempSocket.url))","            try app.register(collection: StubAlertRouteController())","","            \/\/ (4)","            try await app.testing(method: .unixDomainSocket(path: tempSocket.path))","                .test(.GET, \"message\", beforeResponse: { res async throws in ","                    try req.body.writeString(\"stub_ok\", encoding: .utf8)","                }, afterResponse: { res async throws in","                    #expect(res.status == .ok)","                })","        }","    }","}"]}],"kind":"content"}],"identifier":{"url":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer","interfaceLanguage":"swift"},"metadata":{"externalID":"VaporTestingSocketServer","role":"collection","modules":[{"name":"VaporTestingSocketServer"}],"title":"VaporTestingSocketServer","roleHeading":"Framework","symbolKind":"module"},"abstract":[{"text":"A supplement to ","type":"text"},{"type":"codeVoice","code":"VaporTesting"},{"type":"text","text":" to work with an application over UNIX domain sockets (UDS)."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/vaportestingsocketserver"]}],"topicSections":[{"title":"Create Socket","identifiers":["doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-52exl","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-43u4g","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocketError"],"anchor":"Create-Socket"},{"title":"Test Application","anchor":"Test-Application","identifiers":["doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/testing(method:)","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/SocketServerMethod"]}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/withTemporarySocket(function:_:)-52exl":{"type":"topic","abstract":[{"type":"text","text":"Creates a temporary UNIX domain socket for usage within the passed closure’s scope."}],"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-52exl","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withTemporarySocket","kind":"identifier"},{"kind":"text","text":"<"},{"text":"O","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"function"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", ("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"TemporarySocket","kind":"typeIdentifier","preciseIdentifier":"s:24VaporTestingSocketServer09TemporaryC0V"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"O","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"O"}],"title":"withTemporarySocket(function:_:)","url":"\/documentation\/vaportestingsocketserver\/withtemporarysocket(function:_:)-52exl"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/TemporarySocket":{"url":"\/documentation\/vaportestingsocketserver\/temporarysocket","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TemporarySocket"}],"abstract":[{"type":"text","text":"A representation of a temporary UNIX domain socket for testing purposes."}],"title":"TemporarySocket","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TemporarySocket"}],"type":"topic"},"https://github.com/vapor/vapor":{"identifier":"https:\/\/github.com\/vapor\/vapor","type":"link","titleInlineContent":[{"text":"Vapor","type":"text"}],"url":"https:\/\/github.com\/vapor\/vapor","title":"Vapor"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/TemporarySocketError":{"title":"TemporarySocketError","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TemporarySocketError"}],"navigatorTitle":[{"kind":"identifier","text":"TemporarySocketError"}],"url":"\/documentation\/vaportestingsocketserver\/temporarysocketerror","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocketError","kind":"symbol","type":"topic","abstract":[{"text":"Errors that may be thrown when attempting to create a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket"},{"type":"text","text":"."}],"role":"symbol"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/withTemporarySocket(function:_:)-43u4g":{"url":"\/documentation\/vaportestingsocketserver\/withtemporarysocket(function:_:)-43u4g","type":"topic","role":"symbol","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-43u4g","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withTemporarySocket"},{"kind":"text","text":"<"},{"text":"O","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"function","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":", (","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"preciseIdentifier":"s:24VaporTestingSocketServer09TemporaryC0V","text":"TemporarySocket","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"O"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"O"}],"abstract":[{"type":"text","text":"Creates a temporary UNIX domain socket for usage within the passed closure’s scope."}],"kind":"symbol","title":"withTemporarySocket(function:_:)"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/Vapor/Application/testing(method:)":{"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"testing","kind":"identifier"},{"text":"(","kind":"text"},{"text":"method","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Application","preciseIdentifier":"s:5Vapor11ApplicationC","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:5Vapor11ApplicationC0A19TestingSocketServerE0dE6MethodO","text":"SocketServerMethod"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:12VaporTesting0B17ApplicationTesterP","text":"TestingApplicationTester"}],"title":"testing(method:)","url":"\/documentation\/vaportestingsocketserver\/vapor\/application\/testing(method:)","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/testing(method:)","abstract":[{"text":"Returns an application tester for the passed server testing method.","type":"text"}],"kind":"symbol"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer":{"url":"\/documentation\/vaportestingsocketserver","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"A supplement to "},{"code":"VaporTesting","type":"codeVoice"},{"text":" to work with an application over UNIX domain sockets (UDS).","type":"text"}],"title":"VaporTestingSocketServer","type":"topic"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/Vapor/Application/SocketServerMethod":{"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/SocketServerMethod","type":"topic","url":"\/documentation\/vaportestingsocketserver\/vapor\/application\/socketservermethod","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketServerMethod"}],"abstract":[{"text":"Testing method for socket servers.","type":"text"}],"title":"Application.SocketServerMethod","navigatorTitle":[{"text":"SocketServerMethod","kind":"identifier"}],"role":"symbol","kind":"symbol"}}}