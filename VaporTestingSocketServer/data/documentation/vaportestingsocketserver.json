{"topicSections":[{"anchor":"Create-Socket","title":"Create Socket","identifiers":["doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-52exl","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-43u4g","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocketError"]},{"title":"Test Application","identifiers":["doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/testing(method:)","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/SocketServerMethod"],"anchor":"Test-Application"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/vapor\/vapor"},{"type":"text","text":" library already ships with a very useful "},{"code":"VaporTesting","type":"codeVoice"},{"type":"text","text":" library that supports “in-memory” and “live” TCP server testing."},{"type":"text","text":" "},{"text":"However, this SDK does not support server testing over UDS.","type":"text"},{"type":"text","text":" "},{"text":"This package was created to fill this need.","type":"text"}]},{"text":"Why use UDS for Vapor server testing?","level":3,"anchor":"Why-use-UDS-for-Vapor-server-testing","type":"heading"},{"inlineContent":[{"type":"text","text":"When testing a Vapor server, there’s often a need to stub requests made to endpoints made to external services."},{"text":" ","type":"text"},{"type":"text","text":"One easy way to achieve this is to create a "},{"type":"codeVoice","code":"RouteCollection"},{"text":" for that external service for testing purposes and add it to the application being unit tested.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This means of stubbing an external service is not possible when using the “in-memory” testing application (which is the default behavior for "},{"code":"VaporTesting","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Attempting to do so will result in “connection refused” when attempting to make requests to these external service via an "},{"type":"codeVoice","code":"HTTPClient"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"It is possible to stub this way when using a TCP connection (e.g. a ","type":"text"},{"type":"codeVoice","code":"localhost"},{"type":"text","text":" server)."}],"type":"paragraph"},{"inlineContent":[{"text":"However, there is a more efficient way to achieve this type of stubbing with UNIX domain sockets.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"UDS allow for inter-process communication to occur on the same operating system."},{"text":" ","type":"text"},{"text":"Communicating over UDS is more efficient than communicating over TCP.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"How do I use this SDK?","anchor":"How-do-I-use-this-SDK"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This SDK was designed to work alongside the "},{"type":"codeVoice","code":"VaporTesting"},{"type":"text","text":" library."}]},{"inlineContent":[{"type":"text","text":"Let’s say we have server that sends alerts to some endpoint whenever it receives a message."},{"text":" ","type":"text"},{"type":"text","text":"For simplicity, I will only show the "},{"type":"codeVoice","code":"RouteCollection"},{"text":" for the application.","type":"text"},{"text":" ","type":"text"},{"text":"Otherwise, assume it’s a normative Vapor application.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import Vapor","","struct MessageRouteController: RouteCollection {","    let alertBaseURL: URL","","    func boot(routes: any RoutesBuilder) throws {","        routes.post(\"message\", use: { req async throws in","            let message = req.body.string ?? \"\"","            do {","                let alertEndpoint = alertBaseURL.appending(path: \"alert\").absoluteString","                let res = try await req.client.post(URI(string: alertEndpoint), content: message)","                return res.status","            } catch {","                return HTTPResponseStatus.internalServerError","            }","        })","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"In our tests, we will define a stub ","type":"text"},{"code":"RouteCollection","type":"codeVoice"},{"text":" for the external alerting service.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stub service will return either "},{"type":"codeVoice","code":"200"},{"text":" or ","type":"text"},{"code":"400","type":"codeVoice"},{"type":"text","text":", depending on the content of the message."}]},{"syntax":"swift","code":["import Vapor","","struct StubAlertRouteController: RouteCollection {","    func boot(routes: any RoutesBuilder) throws {","        routes.post(\"alert\", use: { req async throws in","            let message = req.body.string ?? \"\"","            switch message {","            case \"stub_ok\": return HTTPResponseStatus.ok","            default: return HTTPResponseStatus.badRequest","            }","        })","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"We’ll then perform the following steps in our test functions:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"Create a testing application using ","type":"text"},{"code":"VaporTesting.withApp","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Create a "},{"code":"TemporarySocket","type":"codeVoice"},{"type":"text","text":" using "},{"type":"codeVoice","code":"withTemporarySocket"},{"type":"text","text":" to use during testing (this is the UDS we’ll be communicating over)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Setup the routes, making use to use the socket URL for the stubbed service route.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Finally, test the application using the ","type":"text"},{"type":"codeVoice","code":"testing"},{"type":"text","text":" API to specify UDS."}]}]}]},{"code":["import Testing","import Vapor","import VaporTesting","import VaporTestingSocketServer","","@Test","func messageReturnsOkOnSuccessfulAlert() async throws {","    \/\/ (1)","    try await VaporTesting.withApp { app in","        \/\/ (2)","        try await withTemporarySocket { tempSocket in ","            \/\/ (3)","            try app.register(collection: MessageRouteController(alertBaseURL: tempSocket.url))","            try app.register(collection: StubAlertRouteController())","","            \/\/ (4)","            try await app.testing(method: .unixDomainSocket(path: tempSocket.path))","                .test(.GET, \"message\", beforeResponse: { res async throws in ","                    try req.body.writeString(\"stub_ok\", encoding: .utf8)","                }, afterResponse: { res async throws in","                    #expect(res.status == .ok)","                })","        }","    }","}"],"type":"codeListing","syntax":"swift"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer"},"metadata":{"role":"collection","modules":[{"name":"VaporTestingSocketServer"}],"title":"VaporTestingSocketServer","symbolKind":"module","externalID":"VaporTestingSocketServer","roleHeading":"Framework"},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"A supplement to "},{"code":"VaporTesting","type":"codeVoice"},{"text":" to work with an application over UNIX domain sockets (UDS).","type":"text"}],"kind":"symbol","variants":[{"paths":["\/documentation\/vaportestingsocketserver"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[[]]},"references":{"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/Vapor/Application/testing(method:)":{"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/testing(method:)","abstract":[{"type":"text","text":"Returns an application tester for the passed server testing method."}],"title":"testing(method:)","kind":"symbol","type":"topic","url":"\/documentation\/vaportestingsocketserver\/vapor\/application\/testing(method:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"testing"},{"kind":"text","text":"("},{"kind":"externalParam","text":"method"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:5Vapor11ApplicationC","text":"Application","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SocketServerMethod","preciseIdentifier":"s:5Vapor11ApplicationC0A19TestingSocketServerE0dE6MethodO","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> any ","kind":"text"},{"kind":"typeIdentifier","text":"TestingApplicationTester","preciseIdentifier":"s:12VaporTesting0B17ApplicationTesterP"}]},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/TemporarySocketError":{"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocketError","title":"TemporarySocketError","type":"topic","role":"symbol","navigatorTitle":[{"text":"TemporarySocketError","kind":"identifier"}],"abstract":[{"type":"text","text":"Errors that may be thrown when attempting to create a "},{"type":"reference","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket","isActive":true},{"type":"text","text":"."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TemporarySocketError"}],"kind":"symbol","url":"\/documentation\/vaportestingsocketserver\/temporarysocketerror"},"https://github.com/vapor/vapor":{"type":"link","title":"vapor","identifier":"https:\/\/github.com\/vapor\/vapor","titleInlineContent":[{"text":"vapor","type":"text"}],"url":"https:\/\/github.com\/vapor\/vapor"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/withTemporarySocket(function:_:)-43u4g":{"title":"withTemporarySocket(function:_:)","url":"\/documentation\/vaportestingsocketserver\/withtemporarysocket(function:_:)-43u4g","abstract":[{"type":"text","text":"Creates a temporary UNIX domain socket for usage within the passed closure’s scope."}],"type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withTemporarySocket","kind":"identifier"},{"text":"<","kind":"text"},{"text":"O","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"function","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", ("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"TemporarySocket","kind":"typeIdentifier","preciseIdentifier":"s:24VaporTestingSocketServer09TemporaryC0V"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"O","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"O","kind":"typeIdentifier"}],"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-43u4g"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/Vapor/Application/SocketServerMethod":{"navigatorTitle":[{"text":"SocketServerMethod","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/SocketServerMethod","abstract":[{"type":"text","text":"Testing method for socket servers."}],"title":"Application.SocketServerMethod","type":"topic","url":"\/documentation\/vaportestingsocketserver\/vapor\/application\/socketservermethod","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketServerMethod","kind":"identifier"}]},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/TemporarySocket":{"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TemporarySocket"}],"abstract":[{"type":"text","text":"A representation of a temporary UNIX domain socket for testing purposes."}],"type":"topic","kind":"symbol","title":"TemporarySocket","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TemporarySocket"}],"url":"\/documentation\/vaportestingsocketserver\/temporarysocket"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer":{"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer","title":"VaporTestingSocketServer","type":"topic","role":"collection","abstract":[{"type":"text","text":"A supplement to "},{"type":"codeVoice","code":"VaporTesting"},{"text":" to work with an application over UNIX domain sockets (UDS).","type":"text"}],"kind":"symbol","url":"\/documentation\/vaportestingsocketserver"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/withTemporarySocket(function:_:)-52exl":{"title":"withTemporarySocket(function:_:)","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-52exl","url":"\/documentation\/vaportestingsocketserver\/withtemporarysocket(function:_:)-52exl","kind":"symbol","abstract":[{"text":"Creates a temporary UNIX domain socket for usage within the passed closure’s scope.","type":"text"}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withTemporarySocket"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"O"},{"kind":"text","text":">("},{"text":"function","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":", (","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"TemporarySocket","preciseIdentifier":"s:24VaporTestingSocketServer09TemporaryC0V","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"O","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"O"}],"role":"symbol"}}}