{"sections":[],"kind":"symbol","metadata":{"title":"VaporTestingSocketServer","externalID":"VaporTestingSocketServer","role":"collection","symbolKind":"module","roleHeading":"Framework","modules":[{"name":"VaporTestingSocketServer"}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"topicSections":[{"identifiers":["doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-52exl","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-43u4g","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocketError"],"title":"Create Socket","anchor":"Create-Socket"},{"title":"Test Application","anchor":"Test-Application","identifiers":["doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/testing(method:)","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/SocketServerMethod"]}],"abstract":[{"text":"A supplement to ","type":"text"},{"type":"codeVoice","code":"VaporTesting"},{"type":"text","text":" to work with an application over UNIX domain sockets (UDS)."}],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"inlineContent":[{"text":"The ","type":"text"},{"identifier":"https:\/\/github.com\/vapor\/vapor","isActive":true,"type":"reference"},{"text":" library already ships with a very useful ","type":"text"},{"type":"codeVoice","code":"VaporTesting"},{"type":"text","text":" library that supports “in-memory” and “live” TCP server testing."},{"text":" ","type":"text"},{"type":"text","text":"However, this SDK does not support server testing over UDS."},{"text":" ","type":"text"},{"type":"text","text":"This package was created to fill this need."}],"type":"paragraph"},{"anchor":"Why-use-UDS-for-Vapor-server-testing","level":3,"text":"Why use UDS for Vapor server testing?","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"When testing a Vapor server, there’s often a need to stub requests made to endpoints made to external services.","type":"text"},{"type":"text","text":" "},{"text":"One easy way to achieve this is to create a ","type":"text"},{"code":"RouteCollection","type":"codeVoice"},{"type":"text","text":" for that external service for testing purposes and add it to the application being unit tested."}]},{"type":"paragraph","inlineContent":[{"text":"This means of stubbing an external service is not possible when using the “in-memory” testing application (which is the default behavior for ","type":"text"},{"type":"codeVoice","code":"VaporTesting"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Attempting to do so will result in “connection refused” when attempting to make requests to these external service via an "},{"code":"HTTPClient","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"It is possible to stub this way when using a TCP connection (e.g. a ","type":"text"},{"code":"localhost","type":"codeVoice"},{"type":"text","text":" server)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there is a more efficient way to achieve this type of stubbing with UNIX domain sockets."},{"text":" ","type":"text"},{"text":"UDS allow for inter-process communication to occur on the same operating system.","type":"text"},{"type":"text","text":" "},{"text":"Communicating over UDS is more efficient than communicating over TCP.","type":"text"}]},{"anchor":"How-do-I-use-this-SDK","level":3,"type":"heading","text":"How do I use this SDK?"},{"inlineContent":[{"text":"This SDK was designed to work alongside the ","type":"text"},{"type":"codeVoice","code":"VaporTesting"},{"type":"text","text":" library."}],"type":"paragraph"},{"inlineContent":[{"text":"Let’s say we have server that sends alerts to some endpoint whenever it receives a message.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For simplicity, I will only show the "},{"type":"codeVoice","code":"RouteCollection"},{"text":" for the application.","type":"text"},{"type":"text","text":" "},{"text":"Otherwise, assume it’s a normative Vapor application.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["import Vapor","","struct MessageRouteController: RouteCollection {","    let alertBaseURL: URL","","    func boot(routes: any RoutesBuilder) throws {","        routes.post(\"message\", use: { req async throws in","            let message = req.body.string ?? \"\"","            do {","                let alertEndpoint = alertBaseURL.appending(path: \"alert\").absoluteString","                let res = try await req.client.post(URI(string: alertEndpoint), content: message)","                return res.status","            } catch {","                return HTTPResponseStatus.internalServerError","            }","        })","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In our tests, we will define a stub ","type":"text"},{"code":"RouteCollection","type":"codeVoice"},{"type":"text","text":" for the external alerting service."},{"text":" ","type":"text"},{"type":"text","text":"The stub service will return either "},{"type":"codeVoice","code":"200"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"400"},{"text":", depending on the content of the message.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import Vapor","","struct StubAlertRouteController: RouteCollection {","    func boot(routes: any RoutesBuilder) throws {","        routes.post(\"alert\", use: { req async throws in","            let message = req.body.string ?? \"\"","            switch message {","            case \"stub_ok\": return HTTPResponseStatus.ok","            default: return HTTPResponseStatus.badRequest","            }","        })","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ll then perform the following steps in our test functions:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Create a testing application using "},{"type":"codeVoice","code":"VaporTesting.withApp"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create a ","type":"text"},{"code":"TemporarySocket","type":"codeVoice"},{"text":" using ","type":"text"},{"type":"codeVoice","code":"withTemporarySocket"},{"type":"text","text":" to use during testing (this is the UDS we’ll be communicating over)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Setup the routes, making use to use the socket URL for the stubbed service route.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Finally, test the application using the "},{"code":"testing","type":"codeVoice"},{"type":"text","text":" API to specify UDS."}],"type":"paragraph"}]}],"type":"orderedList"},{"syntax":"swift","code":["import Testing","import Vapor","import VaporTesting","import VaporTestingSocketServer","","@Test","func messageReturnsOkOnSuccessfulAlert() async throws {","    \/\/ (1)","    try await VaporTesting.withApp { app in","        \/\/ (2)","        try await withTemporarySocket { tempSocket in ","            \/\/ (3)","            try app.register(collection: MessageRouteController(alertBaseURL: tempSocket.url))","            try app.register(collection: StubAlertRouteController())","","            \/\/ (4)","            try await app.testing(method: .unixDomainSocket(path: tempSocket.path))","                .test(.GET, \"message\", beforeResponse: { res async throws in ","                    try req.body.writeString(\"stub_ok\", encoding: .utf8)","                }, afterResponse: { res async throws in","                    #expect(res.status == .ok)","                })","        }","    }","}"],"type":"codeListing"}],"kind":"content"}],"hierarchy":{"paths":[[]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer"},"variants":[{"paths":["\/documentation\/vaportestingsocketserver"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer":{"url":"\/documentation\/vaportestingsocketserver","abstract":[{"type":"text","text":"A supplement to "},{"code":"VaporTesting","type":"codeVoice"},{"type":"text","text":" to work with an application over UNIX domain sockets (UDS)."}],"type":"topic","title":"VaporTestingSocketServer","role":"collection","kind":"symbol","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/withTemporarySocket(function:_:)-43u4g":{"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-43u4g","title":"withTemporarySocket(function:_:)","url":"\/documentation\/vaportestingsocketserver\/withtemporarysocket(function:_:)-43u4g","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withTemporarySocket"},{"text":"<","kind":"text"},{"text":"O","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"function","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:24VaporTestingSocketServer09TemporaryC0V","text":"TemporarySocket","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"O","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"O","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"text":"Creates a temporary UNIX domain socket for usage within the passed closure’s scope.","type":"text"}],"role":"symbol"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/TemporarySocketError":{"navigatorTitle":[{"text":"TemporarySocketError","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"TemporarySocketError","type":"topic","abstract":[{"text":"Errors that may be thrown when attempting to create a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"TemporarySocketError","kind":"identifier"}],"url":"\/documentation\/vaportestingsocketserver\/temporarysocketerror","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocketError"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/Vapor/Application/SocketServerMethod":{"type":"topic","title":"Application.SocketServerMethod","navigatorTitle":[{"text":"SocketServerMethod","kind":"identifier"}],"abstract":[{"type":"text","text":"Testing method for socket servers."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"SocketServerMethod","kind":"identifier"}],"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/SocketServerMethod","url":"\/documentation\/vaportestingsocketserver\/vapor\/application\/socketservermethod","role":"symbol"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/Vapor/Application/testing(method:)":{"title":"testing(method:)","kind":"symbol","type":"topic","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/testing(method:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"testing"},{"kind":"text","text":"("},{"kind":"externalParam","text":"method"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:5Vapor11ApplicationC","text":"Application"},{"text":".","kind":"text"},{"text":"SocketServerMethod","kind":"typeIdentifier","preciseIdentifier":"s:5Vapor11ApplicationC0A19TestingSocketServerE0dE6MethodO"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> any ","kind":"text"},{"text":"TestingApplicationTester","kind":"typeIdentifier","preciseIdentifier":"s:12VaporTesting0B17ApplicationTesterP"}],"url":"\/documentation\/vaportestingsocketserver\/vapor\/application\/testing(method:)","role":"symbol","abstract":[{"text":"Returns an application tester for the passed server testing method.","type":"text"}]},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/withTemporarySocket(function:_:)-52exl":{"title":"withTemporarySocket(function:_:)","url":"\/documentation\/vaportestingsocketserver\/withtemporarysocket(function:_:)-52exl","kind":"symbol","abstract":[{"type":"text","text":"Creates a temporary UNIX domain socket for usage within the passed closure’s scope."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withTemporarySocket","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"O"},{"kind":"text","text":">("},{"kind":"externalParam","text":"function"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":", ("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TemporarySocket","kind":"typeIdentifier","preciseIdentifier":"s:24VaporTestingSocketServer09TemporaryC0V"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"O","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"O","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-52exl"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/TemporarySocket":{"type":"topic","title":"TemporarySocket","url":"\/documentation\/vaportestingsocketserver\/temporarysocket","abstract":[{"type":"text","text":"A representation of a temporary UNIX domain socket for testing purposes."}],"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TemporarySocket"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"TemporarySocket","kind":"identifier"}]},"https://github.com/vapor/vapor":{"type":"link","titleInlineContent":[{"type":"text","text":"vapor"}],"url":"https:\/\/github.com\/vapor\/vapor","identifier":"https:\/\/github.com\/vapor\/vapor","title":"vapor"}}}