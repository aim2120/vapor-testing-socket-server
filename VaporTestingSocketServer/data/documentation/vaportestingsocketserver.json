{"hierarchy":{"paths":[[]]},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/vaportestingsocketserver"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"identifier":{"url":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer","interfaceLanguage":"swift"},"metadata":{"symbolKind":"module","modules":[{"name":"VaporTestingSocketServer"}],"roleHeading":"Framework","role":"collection","title":"VaporTestingSocketServer","externalID":"VaporTestingSocketServer"},"topicSections":[{"anchor":"Create-Socket","title":"Create Socket","identifiers":["doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-52exl","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-43u4g","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocketError"]},{"title":"Test Application","identifiers":["doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/testing(method:)","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/SocketServerMethod"],"anchor":"Test-Application"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"https:\/\/github.com\/vapor\/vapor","isActive":true},{"text":" library already ships with a very useful ","type":"text"},{"code":"VaporTesting","type":"codeVoice"},{"type":"text","text":" library that supports “in-memory” and “live” TCP server testing."},{"type":"text","text":" "},{"type":"text","text":"However, this SDK does not support server testing over UDS."},{"text":" ","type":"text"},{"type":"text","text":"This package was created to fill this need."}]},{"content":[{"inlineContent":[{"type":"text","text":"This library is only available for use in Debug builds."},{"type":"text","text":" "},{"type":"text","text":"This is due to the need to use a "},{"type":"codeVoice","code":"@testable"},{"type":"text","text":" import for the "},{"type":"codeVoice","code":"VaporTesting"},{"type":"text","text":" library target."},{"text":" ","type":"text"},{"text":"Feel free to open an issue if this is problematic for your own usage.","type":"text"}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"text":"Why use UDS for Vapor server testing?","type":"heading","level":3,"anchor":"Why-use-UDS-for-Vapor-server-testing"},{"inlineContent":[{"type":"text","text":"When testing a Vapor server, there’s often a need to stub requests made to endpoints made to external services."},{"type":"text","text":" "},{"type":"text","text":"One easy way to achieve this is to create a "},{"type":"codeVoice","code":"RouteCollection"},{"type":"text","text":" for that external service for testing purposes and add it to the application being unit tested."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This means of stubbing an external service is not possible when using the “in-memory” testing application (which is the default behavior for ","type":"text"},{"code":"VaporTesting","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Attempting to do so will result in “connection refused” when attempting to make requests to these external service via an "},{"type":"codeVoice","code":"HTTPClient"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"It is possible to stub this way when using a TCP connection (e.g. a ","type":"text"},{"code":"localhost","type":"codeVoice"},{"text":" server).","type":"text"}]},{"inlineContent":[{"text":"However, there is a more efficient way to achieve this type of stubbing with UNIX domain sockets.","type":"text"},{"text":" ","type":"text"},{"text":"UDS allow for inter-process communication to occur on the same operating system.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Communicating over UDS is more efficient than communicating over TCP."}],"type":"paragraph"},{"type":"heading","anchor":"How-do-I-use-this-SDK","level":3,"text":"How do I use this SDK?"},{"inlineContent":[{"text":"This SDK was designed to work alongside the ","type":"text"},{"type":"codeVoice","code":"VaporTesting"},{"text":" library.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Let’s say we have server that sends alerts to some endpoint whenever it receives a message."},{"type":"text","text":" "},{"type":"text","text":"For simplicity, I will only show the "},{"code":"RouteCollection","type":"codeVoice"},{"text":" for the application.","type":"text"},{"type":"text","text":" "},{"text":"Otherwise, assume it’s a normative Vapor application.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import Vapor","","struct MessageRouteController: RouteCollection {","    let alertBaseURL: URL","","    func boot(routes: any RoutesBuilder) throws {","        routes.post(\"message\", use: { req async throws in","            let message = req.body.string ?? \"\"","            do {","                let alertEndpoint = alertBaseURL.appending(path: \"alert\").absoluteString","                let res = try await req.client.post(URI(string: alertEndpoint), content: message)","                return res.status","            } catch {","                return HTTPResponseStatus.internalServerError","            }","        })","    }","}"]},{"inlineContent":[{"text":"In our tests, we will define a stub ","type":"text"},{"type":"codeVoice","code":"RouteCollection"},{"type":"text","text":" for the external alerting service."},{"type":"text","text":" "},{"text":"The stub service will return either ","type":"text"},{"type":"codeVoice","code":"200"},{"type":"text","text":" or "},{"code":"400","type":"codeVoice"},{"text":", depending on the content of the message.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["import Vapor","","struct StubAlertRouteController: RouteCollection {","    func boot(routes: any RoutesBuilder) throws {","        routes.post(\"alert\", use: { req async throws in","            let message = req.body.string ?? \"\"","            switch message {","            case \"stub_ok\": return HTTPResponseStatus.ok","            default: return HTTPResponseStatus.badRequest","            }","        })","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ll then perform the following steps in our test functions:"}]},{"items":[{"content":[{"inlineContent":[{"text":"Create a testing application using ","type":"text"},{"type":"codeVoice","code":"VaporTesting.withApp"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"TemporarySocket"},{"type":"text","text":" using "},{"code":"withTemporarySocket","type":"codeVoice"},{"type":"text","text":" to use during testing (this is the UDS we’ll be communicating over)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Setup the routes, making use to use the socket URL for the stubbed service route.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, test the application using the "},{"type":"codeVoice","code":"testing"},{"type":"text","text":" API to specify UDS."}]}]}],"type":"orderedList"},{"type":"codeListing","code":["import Testing","import Vapor","import VaporTesting","import VaporTestingSocketServer","","@Test","func messageReturnsOkOnSuccessfulAlert() async throws {","    \/\/ (1)","    try await VaporTesting.withApp { app in","        \/\/ (2)","        try await withTemporarySocket { tempSocket in ","            \/\/ (3)","            try app.register(collection: MessageRouteController(alertBaseURL: tempSocket.url))","            try app.register(collection: StubAlertRouteController())","","            \/\/ (4)","            try await app.testing(method: .unixDomainSocket(path: tempSocket.path))","                .test(.GET, \"message\", beforeResponse: { res async throws in ","                    try req.body.writeString(\"stub_ok\", encoding: .utf8)","                }, afterResponse: { res async throws in","                    #expect(res.status == .ok)","                })","        }","    }","}"],"syntax":"swift"}]}],"abstract":[{"type":"text","text":"A supplement to "},{"code":"VaporTesting","type":"codeVoice"},{"type":"text","text":" to work with an application over UNIX domain sockets (UDS)."}],"references":{"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/Vapor/Application/SocketServerMethod":{"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Testing method for socket servers."}],"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SocketServerMethod"}],"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/SocketServerMethod","url":"\/documentation\/vaportestingsocketserver\/vapor\/application\/socketservermethod","navigatorTitle":[{"text":"SocketServerMethod","kind":"identifier"}],"title":"Application.SocketServerMethod"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/TemporarySocket":{"title":"TemporarySocket","kind":"symbol","role":"symbol","url":"\/documentation\/vaportestingsocketserver\/temporarysocket","abstract":[{"type":"text","text":"A representation of a temporary UNIX domain socket for testing purposes."}],"navigatorTitle":[{"text":"TemporarySocket","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"TemporarySocket","kind":"identifier"}],"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket"},"https://github.com/vapor/vapor":{"url":"https:\/\/github.com\/vapor\/vapor","type":"link","titleInlineContent":[{"type":"text","text":"Vapor"}],"title":"Vapor","identifier":"https:\/\/github.com\/vapor\/vapor"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/withTemporarySocket(function:_:)-52exl":{"url":"\/documentation\/vaportestingsocketserver\/withtemporarysocket(function:_:)-52exl","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"withTemporarySocket","kind":"identifier"},{"kind":"text","text":"<"},{"text":"O","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"function","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":", (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"TemporarySocket","preciseIdentifier":"s:24VaporTestingSocketServer09TemporaryC0V"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"O","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"O"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Creates a temporary UNIX domain socket for usage within the passed closure’s scope."}],"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-52exl","title":"withTemporarySocket(function:_:)"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer":{"role":"collection","abstract":[{"type":"text","text":"A supplement to "},{"type":"codeVoice","code":"VaporTesting"},{"type":"text","text":" to work with an application over UNIX domain sockets (UDS)."}],"title":"VaporTestingSocketServer","url":"\/documentation\/vaportestingsocketserver","type":"topic","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer","kind":"symbol"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/TemporarySocketError":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TemporarySocketError"}],"navigatorTitle":[{"text":"TemporarySocketError","kind":"identifier"}],"title":"TemporarySocketError","type":"topic","kind":"symbol","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocketError","role":"symbol","abstract":[{"text":"Errors that may be thrown when attempting to create a ","type":"text"},{"type":"reference","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket","isActive":true},{"type":"text","text":"."}],"url":"\/documentation\/vaportestingsocketserver\/temporarysocketerror"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/Vapor/Application/testing(method:)":{"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/testing(method:)","url":"\/documentation\/vaportestingsocketserver\/vapor\/application\/testing(method:)","abstract":[{"text":"Returns an application tester for the passed server testing method.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"testing","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"method"},{"kind":"text","text":": "},{"preciseIdentifier":"s:5Vapor11ApplicationC","kind":"typeIdentifier","text":"Application"},{"kind":"text","text":"."},{"text":"SocketServerMethod","kind":"typeIdentifier","preciseIdentifier":"s:5Vapor11ApplicationC0A19TestingSocketServerE0dE6MethodO"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> any "},{"preciseIdentifier":"s:12VaporTesting0B17ApplicationTesterP","text":"TestingApplicationTester","kind":"typeIdentifier"}],"title":"testing(method:)","kind":"symbol","type":"topic","role":"symbol"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/withTemporarySocket(function:_:)-43u4g":{"url":"\/documentation\/vaportestingsocketserver\/withtemporarysocket(function:_:)-43u4g","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withTemporarySocket"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"O"},{"text":">(","kind":"text"},{"text":"function","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":", ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"TemporarySocket","preciseIdentifier":"s:24VaporTestingSocketServer09TemporaryC0V"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"O","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"O","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Creates a temporary UNIX domain socket for usage within the passed closure’s scope."}],"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-43u4g","title":"withTemporarySocket(function:_:)"}}}