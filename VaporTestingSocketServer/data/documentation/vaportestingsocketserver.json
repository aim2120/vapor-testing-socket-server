{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/vaportestingsocketserver"]}],"abstract":[{"type":"text","text":"A supplement to "},{"type":"codeVoice","code":"VaporTesting"},{"text":" to work with an application over UNIX domain sockets (UDS).","type":"text"}],"sections":[],"kind":"symbol","topicSections":[{"anchor":"Create-Socket","title":"Create Socket","identifiers":["doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-52exl","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-43u4g","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocketError"]},{"anchor":"Test-Application","title":"Test Application","identifiers":["doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/testing(method:)","doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/SocketServerMethod"]}],"identifier":{"url":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/vapor\/vapor","isActive":true},{"type":"text","text":" library already ships with a very useful "},{"code":"VaporTesting","type":"codeVoice"},{"type":"text","text":" library that supports “in-memory” and “live” TCP server testing."},{"text":" ","type":"text"},{"text":"However, this SDK does not support server testing over UDS.","type":"text"},{"type":"text","text":" "},{"text":"This package was created to fill this need.","type":"text"}],"type":"paragraph"},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This library is only available for use in Debug builds."},{"text":" ","type":"text"},{"type":"text","text":"This is due to the need to use a "},{"code":"@testable","type":"codeVoice"},{"text":" import for the ","type":"text"},{"type":"codeVoice","code":"VaporTesting"},{"text":" library target.","type":"text"},{"type":"text","text":" "},{"text":"Feel free to open an issue if this is problematic for your own usage.","type":"text"}]}]},{"level":3,"type":"heading","text":"Why use UDS for Vapor server testing?","anchor":"Why-use-UDS-for-Vapor-server-testing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When testing a Vapor server, there’s often a need to stub requests made to endpoints made to external services."},{"text":" ","type":"text"},{"type":"text","text":"One easy way to achieve this is to create a "},{"type":"codeVoice","code":"RouteCollection"},{"text":" for that external service for testing purposes and add it to the application being unit tested.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means of stubbing an external service is not possible when using the “in-memory” testing application (which is the default behavior for "},{"type":"codeVoice","code":"VaporTesting"},{"text":").","type":"text"},{"type":"text","text":" "},{"text":"Attempting to do so will result in “connection refused” when attempting to make requests to these external service via an ","type":"text"},{"type":"codeVoice","code":"HTTPClient"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"It is possible to stub this way when using a TCP connection (e.g. a ","type":"text"},{"code":"localhost","type":"codeVoice"},{"type":"text","text":" server)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there is a more efficient way to achieve this type of stubbing with UNIX domain sockets."},{"type":"text","text":" "},{"type":"text","text":"UDS allow for inter-process communication to occur on the same operating system."},{"type":"text","text":" "},{"type":"text","text":"Communicating over UDS is more efficient than communicating over TCP."}]},{"text":"How do I use this SDK?","anchor":"How-do-I-use-this-SDK","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This SDK was designed to work alongside the ","type":"text"},{"code":"VaporTesting","type":"codeVoice"},{"text":" library.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Let’s say we have server that sends alerts to some endpoint whenever it receives a message."},{"type":"text","text":" "},{"type":"text","text":"For simplicity, I will only show the "},{"type":"codeVoice","code":"RouteCollection"},{"text":" for the application.","type":"text"},{"text":" ","type":"text"},{"text":"Otherwise, assume it’s a normative Vapor application.","type":"text"}],"type":"paragraph"},{"code":["import Vapor","","struct MessageRouteController: RouteCollection {","    let alertBaseURL: URL","","    func boot(routes: any RoutesBuilder) throws {","        routes.post(\"message\", use: { req async throws in","            let message = req.body.string ?? \"\"","            do {","                let alertEndpoint = alertBaseURL.appending(path: \"alert\").absoluteString","                let res = try await req.client.post(URI(string: alertEndpoint), content: message)","                return res.status","            } catch {","                return HTTPResponseStatus.internalServerError","            }","        })","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In our tests, we will define a stub "},{"type":"codeVoice","code":"RouteCollection"},{"text":" for the external alerting service.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stub service will return either "},{"code":"200","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"400"},{"text":", depending on the content of the message.","type":"text"}]},{"code":["import Vapor","","struct StubAlertRouteController: RouteCollection {","    func boot(routes: any RoutesBuilder) throws {","        routes.post(\"alert\", use: { req async throws in","            let message = req.body.string ?? \"\"","            switch message {","            case \"stub_ok\": return HTTPResponseStatus.ok","            default: return HTTPResponseStatus.badRequest","            }","        })","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"We’ll then perform the following steps in our test functions:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Create a testing application using ","type":"text"},{"code":"VaporTesting.withApp","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Create a ","type":"text"},{"code":"TemporarySocket","type":"codeVoice"},{"type":"text","text":" using "},{"type":"codeVoice","code":"withTemporarySocket"},{"type":"text","text":" to use during testing (this is the UDS we’ll be communicating over)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Setup the routes, making use to use the socket URL for the stubbed service route.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Finally, test the application using the ","type":"text"},{"type":"codeVoice","code":"testing"},{"type":"text","text":" API to specify UDS."}]}]}],"type":"orderedList"},{"syntax":"swift","code":["import Testing","import Vapor","import VaporTesting","import VaporTestingSocketServer","","@Test","func messageReturnsOkOnSuccessfulAlert() async throws {","    \/\/ (1)","    try await VaporTesting.withApp { app in","        \/\/ (2)","        try await withTemporarySocket { tempSocket in ","            \/\/ (3)","            try app.register(collection: MessageRouteController(alertBaseURL: tempSocket.url))","            try app.register(collection: StubAlertRouteController())","","            \/\/ (4)","            try await app.testing(method: .unixDomainSocket(path: tempSocket.path))","                .test(.GET, \"message\", beforeResponse: { res async throws in ","                    try req.body.writeString(\"stub_ok\", encoding: .utf8)","                }, afterResponse: { res async throws in","                    #expect(res.status == .ok)","                })","        }","    }","}"],"type":"codeListing"}]}],"hierarchy":{"paths":[[]]},"metadata":{"externalID":"VaporTestingSocketServer","symbolKind":"module","role":"collection","modules":[{"name":"VaporTestingSocketServer"}],"title":"VaporTestingSocketServer","roleHeading":"Framework"},"references":{"https://github.com/vapor/vapor":{"url":"https:\/\/github.com\/vapor\/vapor","titleInlineContent":[{"text":"Vapor","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/vapor\/vapor","title":"Vapor"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/Vapor/Application/SocketServerMethod":{"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/SocketServerMethod","title":"Application.SocketServerMethod","kind":"symbol","type":"topic","url":"\/documentation\/vaportestingsocketserver\/vapor\/application\/socketservermethod","abstract":[{"type":"text","text":"Testing method for socket servers."}],"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketServerMethod"}],"navigatorTitle":[{"text":"SocketServerMethod","kind":"identifier"}]},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/withTemporarySocket(function:_:)-43u4g":{"abstract":[{"text":"Creates a temporary UNIX domain socket for usage within the passed closure’s scope.","type":"text"}],"url":"\/documentation\/vaportestingsocketserver\/withtemporarysocket(function:_:)-43u4g","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withTemporarySocket"},{"text":"<","kind":"text"},{"text":"O","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"function","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", ("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TemporarySocket","kind":"typeIdentifier","preciseIdentifier":"s:24VaporTestingSocketServer09TemporaryC0V"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"O"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"O","kind":"typeIdentifier"}],"title":"withTemporarySocket(function:_:)","type":"topic","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-43u4g","kind":"symbol","role":"symbol"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/TemporarySocketError":{"abstract":[{"type":"text","text":"Errors that may be thrown when attempting to create a "},{"type":"reference","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket","isActive":true},{"text":".","type":"text"}],"url":"\/documentation\/vaportestingsocketserver\/temporarysocketerror","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TemporarySocketError"}],"title":"TemporarySocketError","type":"topic","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocketError","kind":"symbol","navigatorTitle":[{"text":"TemporarySocketError","kind":"identifier"}],"role":"symbol"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/withTemporarySocket(function:_:)-52exl":{"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/withTemporarySocket(function:_:)-52exl","kind":"symbol","abstract":[{"text":"Creates a temporary UNIX domain socket for usage within the passed closure’s scope.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withTemporarySocket","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"O"},{"kind":"text","text":">("},{"text":"function","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TemporarySocket","preciseIdentifier":"s:24VaporTestingSocketServer09TemporaryC0V","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"O","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"O","kind":"typeIdentifier"}],"title":"withTemporarySocket(function:_:)","url":"\/documentation\/vaportestingsocketserver\/withtemporarysocket(function:_:)-52exl"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer":{"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer","title":"VaporTestingSocketServer","kind":"symbol","type":"topic","url":"\/documentation\/vaportestingsocketserver","abstract":[{"type":"text","text":"A supplement to "},{"code":"VaporTesting","type":"codeVoice"},{"type":"text","text":" to work with an application over UNIX domain sockets (UDS)."}],"role":"collection"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/TemporarySocket":{"identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/TemporarySocket","kind":"symbol","abstract":[{"type":"text","text":"A representation of a temporary UNIX domain socket for testing purposes."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"TemporarySocket","kind":"identifier"}],"navigatorTitle":[{"text":"TemporarySocket","kind":"identifier"}],"title":"TemporarySocket","url":"\/documentation\/vaportestingsocketserver\/temporarysocket"},"doc://VaporTestingSocketServer/documentation/VaporTestingSocketServer/Vapor/Application/testing(method:)":{"url":"\/documentation\/vaportestingsocketserver\/vapor\/application\/testing(method:)","title":"testing(method:)","role":"symbol","identifier":"doc:\/\/VaporTestingSocketServer\/documentation\/VaporTestingSocketServer\/Vapor\/Application\/testing(method:)","abstract":[{"type":"text","text":"Returns an application tester for the passed server testing method."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"testing"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"method"},{"kind":"text","text":": "},{"text":"Application","kind":"typeIdentifier","preciseIdentifier":"s:5Vapor11ApplicationC"},{"kind":"text","text":"."},{"preciseIdentifier":"s:5Vapor11ApplicationC0A19TestingSocketServerE0dE6MethodO","text":"SocketServerMethod","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> any "},{"text":"TestingApplicationTester","preciseIdentifier":"s:12VaporTesting0B17ApplicationTesterP","kind":"typeIdentifier"}],"type":"topic","kind":"symbol"}}}